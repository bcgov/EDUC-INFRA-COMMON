---
apiVersion: v1
kind: Template
labels: 
  template: pen-git-tagging-template
metadata: 
  name: pen-git-tagging-template
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata: 
    name: "pen-git-tagging-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: | 
            def GIT_USER = 'NONE'
            def GIT_TOKEN = 'NONE'
            def PEN_REQUEST_BATCH_API_VERSION = '<Not Required>'
            def STUDENT_PROFILE_EMAIL_API = '<Not Required>'
            def STUDENT_PROFILE_VERSION = '<Not Required>'
            def PEN_REQUEST_VERSION = '<Not Required>'
            def STAFF_ADMIN_VERSION = '<Not Required>'
            
            def TOOLS = 'c2mvws-tools'
            def TARGET_ENVIRONMENT = 'c2mvws-dev'
            def JOB_NAME = 'master'
            def STAGING_ENV = 'Dev'
            def APP_DOMAIN = 'pathfinder.gov.bc.ca'
            
            pipeline {
                environment {
                   APPROVERS = ''
                }
                agent any
                stages {
            		stage('Deployment Credentials & Approval') {
            			steps {
            				script {
            					// Get the input
            					def userInput = input(
            							id: 'userInput', message: 'Please enter your GitHub info:',
            							parameters: [
            
            									string(defaultValue: '',
            											description: 'Your GitHub username',
            											name: 'GitHubUser'),
            									password(defaultValue: '',
            											description: 'Your GitHub token',
            											name: 'GitHubToken'),
            							])
            					// Save to variables. Default to empty string if not found.
            					GitHubUser = userInput.GitHubUser?:''
            					GitHubToken = userInput.GitHubToken?:''
            				}
            			}
            		}
                    stage('Provide Release Versions for Tagging in Git') {
                        steps {
            			    script {
                                // Get the input
                                def tagInput = input(
                                        id: 'tagInput', message: 'Please enter the release version number for each component to be tagged out of master in GIT.',
                                        parameters: [
                                                string(defaultValue: "",
                                                        description: 'Enter PEN Request Batch API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'PEN_REQUEST_BATCH_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter Student Profile Email API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'STUDENT_PROFILE_EMAIL_API'),
                                                string(defaultValue: "",
                                                        description: 'Enter Student Profile Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'STUDENT_PROFILE_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter PEN Request Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'PEN_REQUEST_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter Staff Admin Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'STAFF_ADMIN_VERSION'),
                                        ])
            					// Save to variables. Default to empty string if not found.
            					PEN_REQUEST_BATCH_API_VERSION = tagInput.PEN_REQUEST_BATCH_API_VERSION?:''
            					STUDENT_PROFILE_EMAIL_API = tagInput.STUDENT_PROFILE_EMAIL_API?:''
            					STUDENT_PROFILE_VERSION = tagInput.STUDENT_PROFILE_VERSION?:''
            					PEN_REQUEST_VERSION = tagInput.PEN_REQUEST_VERSION?:''
            					STAFF_ADMIN_VERSION = tagInput.STAFF_ADMIN_VERSION?:''
            				}
                        }
                    }
                    stage('Tagging Credentials & Approval') {
                        steps {
                            timeout(time:2, unit:'DAYS')
                     	    {
                               input message: 'Do you approve this Tagging In Git?'
                            }
                        }
                    }
            		stage('Tag PEN Request Batch API In Git'){
            		    when {
            				expression {
            					return "${PEN_REQUEST_BATCH_API_VERSION}" != "<Not Required>" && "${PEN_REQUEST_BATCH_API_VERSION}" != "";
            				}
            			}
            			steps {
            		       createGitTag("${PEN_REQUEST_BATCH_API_VERSION}", "${PEN_REQUEST_BATCH_API_VERSION}", 'EDUC-PEN-REQUEST-BATCH-API')
            			}
            		}
            		stage('Tag Student Profile Email API In Git'){
            		    when {
            				expression {
            					return "${STUDENT_PROFILE_EMAIL_API}" != "<Not Required>" && "${STUDENT_PROFILE_EMAIL_API}" != "";
            				}
            			}
            			steps {
            		       createGitTag("${STUDENT_PROFILE_EMAIL_API}", "${STUDENT_PROFILE_EMAIL_API}", 'EDUC-STUDENT-PROFILE-EMAIL-API')
            			}
            		}
            		stage('Tag Student Profile In Git'){
            		    when {
            				expression {
            					return "${STUDENT_PROFILE_VERSION}" != "<Not Required>" && "${STUDENT_PROFILE_VERSION}" != "";
            				}
            			}
            			steps {
            		       createGitTag("${STUDENT_PROFILE_VERSION}", "${STUDENT_PROFILE_VERSION}", 'EDUC-STUDENT-PROFILE')
            			}
            		}
            		stage('Tag PEN Request Frontend and Backend In Git'){
            		    when {
            				expression {
            					return "${PEN_REQUEST_VERSION}" != "<Not Required>" && "${PEN_REQUEST_VERSION}" != "";
            				}
            			}
            			steps {
            		       createGitTag("${PEN_REQUEST_VERSION}", "${PEN_REQUEST_VERSION}", 'EDUC-PEN-REQUEST')
            			}
            		}
            		stage('Tag Student Admin Frontend and Backend In Git'){
            		    when {
            				expression {
            					return "${STAFF_ADMIN_VERSION}" != "<Not Required>" && "${STAFF_ADMIN_VERSION}" != "";
            				}
            			}
            			steps {
            		       createGitTag("${STAFF_ADMIN_VERSION}", "${STAFF_ADMIN_VERSION}", 'EDUC-STUDENT-ADMIN')
            			}
            		}
                }
            }
            
            def createGitTag(String tagName, String tagMessage, String repoName) {
            script{
                def gitUrl="https://github.com/bcgov/${repoName}.git"
                echo "gitUrl is: ${gitUrl}"
                def path="/tmp/${repoName}"
                echo "Path is: ${path}"
            
                dir ("${path}"){
            		sh """
            		  set +x
            		  echo Running git commands...
            		  git clone ${gitUrl} ${path} -c user.name=random -c user.email=random@someplace.com
            		  git remote set-url origin ${gitUrl}
            		  git tag -a ${tagName} -m ${tagMessage}
            		  git push https://${GitHubUser}:${GitHubToken}@github.com/bcgov/${repoName}.git --tags --quiet
            		"""
                }
            
            }
            }
      type: JenkinsPipeline