---
apiVersion: v1
kind: Template
labels:
 template: pen-test-template
metadata:
 name: pen-test-template
objects:
 - apiVersion: v1
   kind: BuildConfig
   metadata:
    name: "pen-test-pipeline"
   spec:
    strategy:
     jenkinsPipelineStrategy:
      jenkinsfile: |
       def IDIR = 'NONE'
       def IDIR_PW = 'NONE'
       def STUDENT_PROFILE_SAGA_API_VERSION = '<Not Required>'
       def STAFF_ADMIN_VERSION = '<Not Required>'
       def STUDENT_PROFILE_VERSION = '<Not Required>'
       def STUDENT_PROFILE_EMAIL_API_VERSION = '<Not Required>'

       def TOOLS = 'c2mvws-dev'
       def TARGET_ENVIRONMENT = 'c2mvws-test'
       def JOB_NAME = 'master'
       def STAGING_ENV = 'Test'
       def TARGET_ENV = 'test'
       def APP_DOMAIN = 'pathfinder.gov.bc.ca'

       pipeline {
           environment {
       	  NAMESPACE='c2mvws'
       	  COMMON_NAMESPACE='mvubjx'
           }
           agent any
       	stages {
       		stage('Select Versions for Deployment') {
       			steps {
       				script {
       					// Get the input
       					def tagInput = input(
       							id: 'tagInput', message: 'Please enter the version number for each component to be tagged/deployed:',
       							parameters: [

       									string(defaultValue: "",
       											description: 'Enter Staff Admin Version, leave the tag blank if this service is not to be deployed',
       											name: 'STAFF_ADMIN_VERSION'),
       									string(defaultValue: "",
       											description: 'Enter Student Profile Version, leave the tag blank if this service is not to be deployed',
       											name: 'STUDENT_PROFILE_VERSION'),
                        string(defaultValue: "",
                            description: 'Enter Student Profile Email API Version, leave the tag blank if this service is not to be deployed',
                            name: 'STUDENT_PROFILE_EMAIL_API_VERSION'),
       									string(defaultValue: "",
       											description: 'Enter Student Profile Saga API version, leave the tag blank if this service is not to be deployed',
       											name: 'STUDENT_PROFILE_SAGA_API_VERSION'),
       							])
       					// Save to variables. Default to empty string if not found.
                STUDENT_PROFILE_SAGA_API_VERSION = tagInput.STUDENT_PROFILE_SAGA_API_VERSION?:''
       					STAFF_ADMIN_VERSION = tagInput.STAFF_ADMIN_VERSION?:''
       					STUDENT_PROFILE_VERSION = tagInput.STUDENT_PROFILE_VERSION?:''
       					STUDENT_PROFILE_EMAIL_API_VERSION = tagInput.STUDENT_PROFILE_EMAIL_API_VERSION?:''
       				}
       			}
       		}
       		stage('Download setup files'){
       		  steps{
       			  script{
       				  dir('tools/jenkins'){
       					  sh "curl -s https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/openshift/pipelines/common/download-kc.sh | bash -s c2mvws"
                         }
       			  }
       		  }
       		}
       		stage('Student Profile Saga API'){
       			when {
       				expression {
       					return "${STUDENT_PROFILE_SAGA_API_VERSION}" != "<Not Required>" && "${STUDENT_PROFILE_SAGA_API_VERSION}" != "";
       				}
       			}
       			environment {
       			   APP_NAME = "student-profile-saga-api"
       			   DC_URL = "https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE-SAGA-API/master/tools/openshift/api.dc.yaml"
                   }
       			steps {
                deployPatroniSecrets(TARGET_ENV, TARGET_ENVIRONMENT)
                deployPatroni(TARGET_ENV, TARGET_ENVIRONMENT)
       			    deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-profile-saga-api', 'student-profile-saga-api', JOB_NAME, "${STUDENT_PROFILE_SAGA_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, "${DC_URL}", "1", "1", "30m", "300m", "650Mi", "750Mi", TARGET_ENV)
       			    configMapSetup("${APP_NAME}","${APP_NAME}".toUpperCase(), NAMESPACE);
                       script{
                          dir('tools/jenkins'){
                             sh "curl -s https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE-SAGA-API/master/tools/jenkins/update-configmap.sh | bash -s test $APP_NAME $NAMESPACE $COMMON_NAMESPACE"
                          }
                       }
                      deployStageNoTag(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-profile-saga-api', 'student-profile-saga-api', JOB_NAME, "${STUDENT_PROFILE_SAGA_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, "${DC_URL}", "1", "1", "30m", "300m", "650Mi", "750Mi", TARGET_ENV)
                   }
       		}
       		stage('Student Admin Frontend and Backend'){
       			when {
       				expression {
       					return "${STAFF_ADMIN_VERSION}" != "<Not Required>" && "${STAFF_ADMIN_VERSION}" != "";
       				}
       			}
       			environment {
       			   APP_NAME = "student-admin"
       			   DC_URL_FRONTEND = "https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-ADMIN/master/tools/openshift/frontend-static.dc.yaml"
       			   DC_URL_BACKEND = "https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-ADMIN/master/tools/openshift/backend.dc.yaml"
                   }
       			steps {
       			    deployUIStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-admin', 'student-admin', JOB_NAME, "${STAFF_ADMIN_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, "${DC_URL_FRONTEND}", "${DC_URL_BACKEND}", "1", "1", "25m", "50m", "150Mi", "250Mi")
                       script{
                          dir('tools/jenkins'){
                             sh "curl -s https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-ADMIN/master/tools/jenkins/update-configmap.sh | bash -s test $APP_NAME $NAMESPACE $COMMON_NAMESPACE"
                          }
                       }
                   }
       		}
       		stage('Student Profile Email API'){
       			when {
       				expression {
       					return "${STUDENT_PROFILE_EMAIL_API_VERSION}" != "<Not Required>" && "${STUDENT_PROFILE_EMAIL_API_VERSION}" != "";
       				}
       			}
       			environment {
       			   APP_NAME = "student-profile-email-api"
       			   DC_URL = "https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE-EMAIL-API/master/tools/openshift/api.dc.yaml"
                   }
       			steps {
       			    deployStageNoEnv(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-profile-email-api', 'student-profile-email-api', JOB_NAME, "${STUDENT_PROFILE_EMAIL_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, "${DC_URL}", "1", "1", "30m", "300m", "650Mi", "750Mi")
       			    configMapChesSetup("${APP_NAME}","${APP_NAME}".toUpperCase(), NAMESPACE);
                       script{
                          dir('tools/jenkins'){
                             sh "curl -s https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE-EMAIL-API/master/tools/jenkins/update-configmap.sh | bash -s test $APP_NAME $NAMESPACE $COMMON_NAMESPACE"
                          }
                       }
                       deployStageNoTagNoEnv(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-profile-email-api', 'student-profile-email-api', JOB_NAME, "${STUDENT_PROFILE_EMAIL_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, "${DC_URL}", "1", "1", "30m", "300m", "650Mi", "750Mi")
                   }
       		}
       		stage('Student Profile Frontend and Backend'){
       			when {
       				expression {
       					return "${STUDENT_PROFILE_VERSION}" != "<Not Required>" && "${STUDENT_PROFILE_VERSION}" != "";
       				}
       			}
       			environment {
       			   APP_NAME = "student-profile"
       			   DC_URL_FRONTEND = "https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE/master/tools/openshift/frontend-static.dc.yaml"
       			   DC_URL_BACKEND = "https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE/master/tools/openshift/backend.dc.yaml"
                   }
       			steps {
       			    deployUIStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-profile', 'student-profile', JOB_NAME, "${STUDENT_PROFILE_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, "${DC_URL_FRONTEND}", "${DC_URL_BACKEND}", "1", "1", "25m", "50m", "150Mi", "250Mi")
                       script{
                          dir('tools/jenkins'){
                             sh "curl -s https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE/master/tools/jenkins/update-configmap.sh | bash -s test $APP_NAME $NAMESPACE $COMMON_NAMESPACE"
                          }
                       }
                   }
       		}
       	}
       }

       def configMapSetup(String appName,String appNameUpper, String namespace){
           script {

             try{
               sh( script: "oc project ${namespace}-test", returnStdout: true)
               sh( script: "oc describe configmaps ${appName}-test-setup-config", returnStdout: true)
               sh( script: "oc project ${namespace}-tools", returnStdout: true)
               echo 'Config map already exists. Moving to next stage...'
             } catch(e){
                 configProperties = input(
                 id: 'configProperties', message: "Please enter the required credentials to allow ${appName} to run:",
                 parameters: [
                     string(defaultValue: "",
                             description: 'JDBC connect string for database',
                             name: 'DB_JDBC_CONNECT_STRING'),
                     string(defaultValue: "",
                             description: "Username for ${appName} to connect to the database",
                             name: "DB_USER"),
                     password(defaultValue: "",
                             description: "Password for ${appName} to connect to the database",
                             name: "DB_PWD"),
                 ])
       		sh """
       		  set +x
       		  echo Running curl command...
       		  oc create -n ${namespace}-test configmap ${appName}-test-setup-config --from-literal=DB_JDBC_CONNECT_STRING=${configProperties.DB_JDBC_CONNECT_STRING} --from-literal=DB_USER_${appNameUpper}=${configProperties.DB_USER} --from-literal=DB_PWD_${appNameUpper}=${configProperties.DB_PWD} --dry-run -o yaml | oc apply -f -
       		  oc project ${namespace}-tools
       		"""
             }
           }
       }

       def configMapChesSetup(String appName,String appNameUpper, String namespace){
           script {

             try{
               sh( script: "oc project ${namespace}-test", returnStdout: true)
               sh( script: "oc describe configmaps ${appName}-test-setup-config", returnStdout: true)
               sh( script: "oc project ${namespace}-tools", returnStdout: true)
               echo 'Config map already exists. Moving to next stage...'
             } catch(e){
                 configProperties = input(
                 id: 'configProperties', message: "Please enter the required credentials to allow ${appName} to run:",
                 parameters: [
                     string(defaultValue: "",
                             description: 'JDBC connect string for database',
                             name: 'CHES_CLIENT_ID'),
                     string(defaultValue: "",
                             description: "Username for ${appName} to connect to the database",
                             name: "CHES_CLIENT_SECRET"),
                     string(defaultValue: "",
                             description: "Password for ${appName} to connect to the database",
                             name: "CHES_ENDPOINT_URL"),
                     string(defaultValue: "",
                             description: "Password for ${appName} to connect to the database",
                             name: "CHES_TOKEN_URL"),
                 ])
       		sh """
       		  set +x
       		  echo Running curl command...
       		  oc create -n ${namespace}-test configmap ${appName}-test-setup-config --from-literal=CHES_CLIENT_ID=${configProperties.CHES_CLIENT_ID} --from-literal=CHES_TOKEN_URL=${configProperties.CHES_TOKEN_URL} --from-literal=CHES_ENDPOINT_URL=${configProperties.CHES_ENDPOINT_URL} --from-literal=CHES_CLIENT_SECRET=${configProperties.CHES_CLIENT_SECRET} --dry-run -o yaml | oc apply -f -
       		  oc project ${namespace}-tools
       		"""
             }
           }
       }

       def deployStage(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv, String targetEnvironment, String appDomain, String rawApiDcURL, String minReplicas, String maxReplicas, String minCPU, String maxCPU, String minMem, String maxMem, String targetEnv) {
         openshift.withCluster() {
       	openshift.withProject(projectEnv) {
       	  echo "Tagging ${appName} image with version ${tag}"
       	  openshift.tag("${toolsEnv}/${repoName}-${jobName}:latest", "${repoName}-${jobName}:${tag}")
       	  def dcTemplate = openshift.process('-f',
       		"${rawApiDcURL}",
       		"REPO_NAME=${repoName}",
       		"JOB_NAME=${jobName}",
       		"NAMESPACE=${projectEnv}",
       		"APP_NAME=${appName}",
       		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
       		"TAG=${tag}",
              "MIN_REPLICAS=${minReplicas}",
              "MAX_REPLICAS=${maxReplicas}",
              "MIN_CPU=${minCPU}",
              "MAX_CPU=${maxCPU}",
              "MIN_MEM=${minMem}",
              "MAX_MEM=${maxMem}",
              "ENV=${targetEnv}"
       	  )

       	  echo "Applying Deployment for ${appName}"
       	  def dc = openshift.apply(dcTemplate).narrow('dc')
       	}
         }
       }

       def deployStageNoTag(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv, String targetEnvironment, String appDomain, String rawApiDcURL, String minReplicas, String maxReplicas, String minCPU, String maxCPU, String minMem, String maxMem, String targetEnv) {
         openshift.withCluster() {
       	openshift.withProject(projectEnv) {
       	  def dcTemplate = openshift.process('-f',
       		"${rawApiDcURL}",
       		"REPO_NAME=${repoName}",
       		"JOB_NAME=${jobName}",
       		"NAMESPACE=${projectEnv}",
       		"APP_NAME=${appName}",
       		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
       		"TAG=${tag}",
              "MIN_REPLICAS=${minReplicas}",
              "MAX_REPLICAS=${maxReplicas}",
              "MIN_CPU=${minCPU}",
              "MAX_CPU=${maxCPU}",
              "MIN_MEM=${minMem}",
              "MAX_MEM=${maxMem}",
              "ENV=${targetEnv}"
       	  )

       	  echo "Applying Deployment for ${appName}"
       	  def dc = openshift.apply(dcTemplate).narrow('dc')
       	}
         }
       }

       def deployStageNoEnv(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv, String targetEnvironment, String appDomain, String rawApiDcURL, String minReplicas, String maxReplicas, String minCPU, String maxCPU, String minMem, String maxMem) {
         openshift.withCluster() {
       	openshift.withProject(projectEnv) {
       	  echo "Tagging ${appName} image with version ${tag}"
       	  openshift.tag("${toolsEnv}/${repoName}-${jobName}:latest", "${repoName}-${jobName}:${tag}")
       	  def dcTemplate = openshift.process('-f',
       		"${rawApiDcURL}",
       		"REPO_NAME=${repoName}",
       		"JOB_NAME=${jobName}",
       		"NAMESPACE=${projectEnv}",
       		"APP_NAME=${appName}",
       		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
       		"TAG=${tag}",
              "MIN_REPLICAS=${minReplicas}",
              "MAX_REPLICAS=${maxReplicas}",
              "MIN_CPU=${minCPU}",
              "MAX_CPU=${maxCPU}",
              "MIN_MEM=${minMem}",
              "MAX_MEM=${maxMem}"
       	  )

       	  echo "Applying Deployment for ${appName}"
       	  def dc = openshift.apply(dcTemplate).narrow('dc')
       	}
         }
       }

       def deployStageNoTagNoEnv(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv, String targetEnvironment, String appDomain, String rawApiDcURL, String minReplicas, String maxReplicas, String minCPU, String maxCPU, String minMem, String maxMem) {
         openshift.withCluster() {
       	openshift.withProject(projectEnv) {
       	  def dcTemplate = openshift.process('-f',
       		"${rawApiDcURL}",
       		"REPO_NAME=${repoName}",
       		"JOB_NAME=${jobName}",
       		"NAMESPACE=${projectEnv}",
       		"APP_NAME=${appName}",
       		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
       		"TAG=${tag}",
              "MIN_REPLICAS=${minReplicas}",
              "MAX_REPLICAS=${maxReplicas}",
              "MIN_CPU=${minCPU}",
              "MAX_CPU=${maxCPU}",
              "MIN_MEM=${minMem}",
              "MAX_MEM=${maxMem}"
       	  )

       	  echo "Applying Deployment for ${appName}"
       	  def dc = openshift.apply(dcTemplate).narrow('dc')
       	}
         }
       }

       def deployUIStage(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv, String targetEnvironment, String appDomain, String rawApiDcURLFrontend, String rawApiDcURLBackend, String minReplicas, String maxReplicas, String minCPU, String maxCPU, String minMem, String maxMem) {
         openshift.withCluster() {
       	openshift.withProject(projectEnv) {
       	  echo "Tagging Image ${repoName}-backend:${jobName} with version ${tag}"
       	  openshift.tag("${toolsEnv}/${repoName}-backend:latest", "${repoName}-backend:${tag}")

       	  echo "Tagging Image ${repoName}-frontend-static:${jobName} with version ${tag}"
       	  openshift.tag("${toolsEnv}/${repoName}-frontend-static:latest", "${repoName}-frontend-static:${tag}")


       	  echo "Processing DeploymentConfig ${appName}-backend..."
       	  def dcBackendTemplate = openshift.process('-f',
       		"${rawApiDcURLBackend}",
       		"REPO_NAME=${repoName}",
       		"JOB_NAME=${jobName}",
       		"NAMESPACE=${projectEnv}",
       		"APP_NAME=${appName}",
       		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
       		"TAG=${tag}",
              "MIN_REPLICAS=${minReplicas}",
              "MAX_REPLICAS=${maxReplicas}",
              "MIN_CPU=${minCPU}",
              "MAX_CPU=${maxCPU}",
              "MIN_MEM=${minMem}",
              "MAX_MEM=${maxMem}"
       	  )

       	  def dcBackend = openshift.apply(dcBackendTemplate).narrow('dc')

       	  echo "Processing DeploymentConfig ${appName}-frontend-static..."
       	  def dcFrontendStaticTemplate = openshift.process('-f',
       		"${rawApiDcURLFrontend}",
       		"REPO_NAME=${repoName}",
       		"JOB_NAME=${jobName}",
       		"NAMESPACE=${projectEnv}",
       		"APP_NAME=${appName}",
       		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
       		"TAG=${tag}",
              "MIN_REPLICAS=${minReplicas}",
              "MAX_REPLICAS=${maxReplicas}",
              "MIN_CPU=${minCPU}",
              "MAX_CPU=${maxCPU}",
              "MIN_MEM=${minMem}",
              "MAX_MEM=${maxMem}"
       	  )

       	  echo "Applying Deployment ${appName}-frontend-static..."
       	  def dcFrontendStatic = openshift.apply(dcFrontendStaticTemplate).narrow('dc')
       	}
         }
       }

       def deployPatroniSecrets(String stageEnv, String projectEnv) {
        openshift.withCluster() {
          openshift.withProject(projectEnv) {
            def patroni = openshift.selector('statefulset', "${APP_NAME}-pgsql-${stageEnv}")
            if(!patroni.exists()){
              def dcTemplate = openshift.process('-f',
                'https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE-SAGA-API/master/tools/openshift/patroni/patroni-postgresql-secrets.yaml',
                "NAME=${APP_NAME}-pgsql",
                "SUFFIX=-${stageEnv}",
                "APP_DB_NAME=student_profile_saga",
                "APP_DB_USERNAME=student_profile_saga"
              )

              echo "Applying Deployment Patroni secrets"
              def template = openshift.apply(dcTemplate).narrow('dc')
              // Wait for deployments to roll out
              timeout(5) {
                template.rollout().status('--watch=true')
              }
       }
              else {
                echo "Deployment of patroni secrets already exists, so skipping to next step"
              }

          }
        }
       }

       def deployPatroni(String stageEnv, String projectEnv) {
        openshift.withCluster() {
          openshift.withProject(projectEnv) {
            def patroni = openshift.selector('statefulset', "${APP_NAME}-pgsql-${stageEnv}")
            if(!patroni.exists()){
              def dcTemplate = openshift.process('-f',
                'https://raw.githubusercontent.com/bcgov/EDUC-STUDENT-PROFILE-SAGA-API/master/tools/openshift/patroni/patroni-postgresql.yaml',
                "NAME=${APP_NAME}-pgsql",
                "SUFFIX=-${stageEnv}",
                "INSTANCE=${APP_NAME}-pgsql-${stageEnv}"
              )

              echo "Applying Deployment patroni"
              def template = openshift.apply(dcTemplate).narrow('statefulset')
              timeout(5) {
                template.rollout().status('--watch=true')
              }
            } else {
              echo "Deployment of patroni already exists, so skipping to next step"
            }
          }
        }
       }