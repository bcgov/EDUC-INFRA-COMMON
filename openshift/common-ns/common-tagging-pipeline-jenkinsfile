            def GIT_USER = 'NONE'
            def GIT_TOKEN = 'NONE'
            def DIGITAL_ID_API_VERSION = '<Not Required>'
            def DOSA_VERSION = '<Not Required>'
            def PEN_DEMOG_API_VERSION = '<Not Required>'
            def PEN_REQUEST_API_VERSION = '<Not Required>'
            def SERVICES_CARD_API_VERSION = '<Not Required>'
            def SOAM_API_VERSION = '<Not Required>'
            def STUDENT_API_VERSION = '<Not Required>'
            def STUDENT_PROFILE_API_VERSION = '<Not Required>'
            def SCHOOL_API_VERSION = '<Not Required>'
            def SLD_API_VERSION = '<Not Required>'
            def PEN_TRAX_API_VERSION = '<Not Required>'
            def PEN_MACRO_API_VERSION = '<Not Required>'
            def TRAX_NOTIFICATION_API_VERSION = '<Not Required>'
            def SLD_NOTIFICATION_API_VERSION = '<Not Required>'


            def TOOLS = '75e61b-tools'
            def JOB_NAME = 'master'
            def STAGING_ENV = 'Dev'

            pipeline {
                environment {
                   APPROVERS = ''
                }
                agent any
                stages {
            		stage('Deployment Credentials & Approval') {
            			steps {
            				script {
            					// Get the input
            					def userInput = input(
            							id: 'userInput', message: 'Please enter your GitHub info:',
            							parameters: [

            									string(defaultValue: '',
            											description: 'Your GitHub username',
            											name: 'GitHubUser'),
            									password(defaultValue: '',
            											description: 'Your GitHub token',
            											name: 'GitHubToken'),
            							])
            					// Save to variables. Default to empty string if not found.
            					GitHubUser = userInput.GitHubUser?:''
            					GitHubToken = userInput.GitHubToken?:''
            				}
            			}
            		}
                    stage('Provide Release Versions for Tagging in Git') {
                        steps {
            			    script {
                                // Get the input
                                def tagInput = input(
                                        id: 'tagInput', message: 'Please enter the release version number for each component to be tagged out of master in GIT.',
                                        parameters: [

                                                string(defaultValue: "",
                                                        description: 'Enter Digital Identity API Version, leave the tag blank if this service is not to be tagged.',
                                                        name: 'DIGITAL_ID_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter DOSA API Version, leave the tag blank if this service is not to be tagged.',
                                                        name: 'DOSA_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter PEN Demog API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'PEN_DEMOG_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter PEN Request API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'PEN_REQUEST_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter Services Card API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'SERVICES_CARD_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter SOAM API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'SOAM_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter Student API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'STUDENT_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter Student Profile API Version, leave the tag blank if this service is not to be tagged',
                                                        name: 'STUDENT_PROFILE_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter School API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'SCHOOL_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter SLD API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'SLD_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter PEN TRAX API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'PEN_TRAX_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter PEN MACRO API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'PEN_MACRO_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter TRAX Notification API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'TRAX_NOTIFICATION_API_VERSION'),
                                                string(defaultValue: "",
                                                        description: 'Enter SLD Notification API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'SLD_NOTIFICATION_API_VERSION')
                                        ])
            					// Save to variables. Default to empty string if not found.
                                DIGITAL_ID_API_VERSION = tagInput.DIGITAL_ID_API_VERSION?:''
                                DOSA_VERSION = tagInput.DOSA_VERSION?:''
                                PEN_DEMOG_API_VERSION = tagInput.PEN_DEMOG_API_VERSION?:''
            					PEN_REQUEST_API_VERSION = tagInput.PEN_REQUEST_API_VERSION?:''
            					SERVICES_CARD_API_VERSION = tagInput.SERVICES_CARD_API_VERSION?:''
            					SOAM_API_VERSION = tagInput.SOAM_API_VERSION?:''
            					STUDENT_API_VERSION = tagInput.STUDENT_API_VERSION?:''
            					STUDENT_PROFILE_API_VERSION = tagInput.STUDENT_PROFILE_API_VERSION?:''
                                SCHOOL_API_VERSION = tagInput.SCHOOL_API_VERSION?:''
                                SLD_API_VERSION = tagInput.SLD_API_VERSION?:''
                                PEN_TRAX_API_VERSION = tagInput.PEN_TRAX_API_VERSION?:''
                                PEN_MACRO_API_VERSION = tagInput.PEN_MACRO_API_VERSION?:''
                                TRAX_NOTIFICATION_API_VERSION = tagInput.TRAX_NOTIFICATION_API_VERSION?:''
                                SLD_NOTIFICATION_API_VERSION = tagInput.SLD_NOTIFICATION_API_VERSION?:''
            				}
                        }
                    }
            		stage('Tag Digital ID In Git'){
            		    when {
            				expression {
            					return "${DIGITAL_ID_API_VERSION}" != "<Not Required>" && "${DIGITAL_ID_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "DIGITALID-API"
                         REPO_NAME = "educ-digitalid-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${DIGITAL_ID_API_VERSION}", "${TOOLS}");
            				createGitTag("${DIGITAL_ID_API_VERSION}", "${DIGITAL_ID_API_VERSION}", 'EDUC-DIGITALID-API')
            			}
            		}
            		stage('Tag DOSA In Git'){
            		    when {
            				expression {
            					return "${DOSA_VERSION}" != "<Not Required>" && "${DOSA_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "DOSA"
                         REPO_NAME_FE = "educ-devops-support-app-frontend-static"
                         REPO_NAME_BE = "educ-devops-support-app-backend"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagUIRelease("${REPO_NAME_FE}", "${APP_NAME}", "${JOB_NAME}", "${DOSA_VERSION}", "${TOOLS}");
                           tagUIRelease("${REPO_NAME_BE}", "${APP_NAME}", "${JOB_NAME}", "${DOSA_VERSION}", "${TOOLS}");
            		       createGitTag("${DOSA_VERSION}", "${DOSA_VERSION}", 'EDUC-DEVOPS-SUPPORT-APP')
            			}
            		}
            		stage('Tag PEN Demographics API In Git'){
            		    when {
            				expression {
            					return "${PEN_DEMOG_API_VERSION}" != "<Not Required>" && "${PEN_DEMOG_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "PEN-DEMOG-API"
                         REPO_NAME = "educ-pen-demog-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${PEN_DEMOG_API_VERSION}", "${TOOLS}");
            			   createGitTag("${PEN_DEMOG_API_VERSION}", "${PEN_DEMOG_API_VERSION}", 'EDUC-PEN-DEMOG-API')
            			}
            		}
            		stage('Tag PEN Request API In Git'){
            		    when {
            				expression {
            					return "${PEN_REQUEST_API_VERSION}" != "<Not Required>" && "${PEN_REQUEST_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "PEN-REQUEST-API"
                         REPO_NAME = "educ-pen-request-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${PEN_REQUEST_API_VERSION}", "${TOOLS}");
            			   createGitTag("${PEN_REQUEST_API_VERSION}", "${PEN_REQUEST_API_VERSION}", 'EDUC-PEN-REQUEST-API')
            			}
            		}
            		stage('Tag Services Card API In Git'){
            		    when {
            				expression {
            					return "${SERVICES_CARD_API_VERSION}" != "<Not Required>" && "${SERVICES_CARD_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "SERVICES-CARD-API"
                         REPO_NAME = "educ-services-card-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${SERVICES_CARD_API_VERSION}", "${TOOLS}");
            		       createGitTag("${SERVICES_CARD_API_VERSION}", "${SERVICES_CARD_API_VERSION}", 'EDUC-SERVICES-CARD-API')
            			}
            		}
            		stage('Tag SOAM API In Git'){
            		    when {
            				expression {
            					return "${SOAM_API_VERSION}" != "<Not Required>" && "${SOAM_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "SOAM-API"
                         REPO_NAME = "educ-soam-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${SOAM_API_VERSION}", "${TOOLS}");
            		       createGitTag("${SOAM_API_VERSION}", "${SOAM_API_VERSION}", 'EDUC-SOAM-API')
            			}
            		}
            		stage('Tag Student API In Git'){
            		    when {
            				expression {
            					return "${STUDENT_API_VERSION}" != "<Not Required>" && "${STUDENT_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "STUDENT-API"
                         REPO_NAME = "educ-student-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${STUDENT_API_VERSION}", "${TOOLS}");
            		       createGitTag("${STUDENT_API_VERSION}", "${STUDENT_API_VERSION}", 'EDUC-STUDENT-API')
            			}
            		}
            		stage('Tag Student Profile API In Git'){
            		    when {
            				expression {
            					return "${STUDENT_PROFILE_API_VERSION}" != "<Not Required>" && "${STUDENT_PROFILE_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "STUDENT-PROFILE-API"
                         REPO_NAME = "educ-student-profile-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${STUDENT_PROFILE_API_VERSION}", "${TOOLS}");
            		       createGitTag("${STUDENT_PROFILE_API_VERSION}", "${STUDENT_PROFILE_API_VERSION}", 'EDUC-STUDENT-PROFILE-API')
            			}
            		}
            		stage('Tag School API In Git'){
            		    when {
            				expression {
            					return "${SCHOOL_API_VERSION}" != "<Not Required>" && "${SCHOOL_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "SCHOOL-API"
                         REPO_NAME = "educ-school-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${SCHOOL_API_VERSION}", "${TOOLS}");
            		       createGitTag("${SCHOOL_API_VERSION}", "${SCHOOL_API_VERSION}", 'EDUC-SCHOOL-API')
            			}
            		}
            		stage('Tag SLD API In Git'){
            		    when {
            				expression {
            					return "${SLD_API_VERSION}" != "<Not Required>" && "${SLD_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "SLD-API"
                         REPO_NAME = "educ-sld-api"
                         JOB_NAME = "main"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${SLD_API_VERSION}", "${TOOLS}");
            		       createGitTag("${SLD_API_VERSION}", "${SLD_API_VERSION}", 'EDUC-SLD-API')
            			}
            		}
            		stage('Tag PEN TRAX In Git'){
            		    when {
            				expression {
            					return "${PEN_TRAX_API_VERSION}" != "<Not Required>" && "${PEN_TRAX_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "PEN-TRAX-API"
                         REPO_NAME = "educ-pen-trax-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${PEN_TRAX_API_VERSION}", "${TOOLS}");
            		       createGitTag("${PEN_TRAX_API_VERSION}", "${PEN_TRAX_API_VERSION}", 'EDUC-PEN-TRAX-API')
            			}
            		}
            		stage('Tag PEN Macro API In Git'){
            		    when {
            				expression {
            					return "${PEN_MACRO_API_VERSION}" != "<Not Required>" && "${PEN_MACRO_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "MACRO-API"
                         REPO_NAME = "educ-macro-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${PEN_MACRO_API_VERSION}", "${TOOLS}");
            		       createGitTag("${PEN_MACRO_API_VERSION}", "${PEN_MACRO_API_VERSION}", 'EDUC-MACRO-API')
            			}
            		}
            		stage('Tag TRAX Notification API In Git'){
            		    when {
            				expression {
            					return "${TRAX_NOTIFICATION_API_VERSION}" != "<Not Required>" && "${TRAX_NOTIFICATION_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "TRAX-NOTIFICATION-API"
                         REPO_NAME = "educ-trax-notification-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${TRAX_NOTIFICATION_API_VERSION}", "${TOOLS}");
            		       createGitTag("${TRAX_NOTIFICATION_API_VERSION}", "${TRAX_NOTIFICATION_API_VERSION}", 'EDUC-TRAX-NOTIFICATION-API')
            			}
            		}
            		stage('Tag SLD Notification API In Git'){
            		    when {
            				expression {
            					return "${SLD_NOTIFICATION_API_VERSION}" != "<Not Required>" && "${SLD_NOTIFICATION_API_VERSION}" != "";
            				}
            			}
                        environment {
                         APP_NAME = "SLD-NOTIFICATION-API"
                         REPO_NAME = "educ-sld-notification-api"
                         JOB_NAME = "master"
                        }
            			steps {
                           tagRelease("${REPO_NAME}", "${APP_NAME}", "${JOB_NAME}", "${SLD_NOTIFICATION_API_VERSION}", "${TOOLS}");
            		       createGitTag("${SLD_NOTIFICATION_API_VERSION}", "${SLD_NOTIFICATION_API_VERSION}", 'EDUC-SLD-NOTIFICATION-API')
            			}
            		}
                }
            }

            def createGitTag(String tagName, String tagMessage, String repoName) {
            script{
                def gitUrl="https://github.com/bcgov/${repoName}.git"
                echo "gitUrl is: ${gitUrl}"
                def path="/tmp/${repoName}"
                echo "Path is: ${path}"
                echo "Clearing out previous clone"
                sh """
                   rm -rf ${path}
                """

                dir ("${path}"){
            		sh """
            		  set +x
            		  echo Running git commands...
            		  git clone ${gitUrl} ${path} -c user.name=random -c user.email=random@someplace.com
            		  git remote set-url origin ${gitUrl}
            		  git tag -a ${tagName} -m ${tagMessage}
            		  git push https://${GitHubUser}:${GitHubToken}@github.com/bcgov/${repoName}.git --tags --quiet
            		"""
                }
              }
            }

            def tagRelease(String repoName, String appName, String jobName, String tag, String sourceEnv) {
                openshift.withCluster() {
                    openshift.withProject("${sourceEnv}") {
                        echo "Tagging ${appName} image with version ${tag}"
                        openshift.tag("${sourceEnv}/${repoName}-${jobName}:latest", "${repoName}-${jobName}:${tag}")
                    }
                }
            }

            def tagUIRelease(String repoName, String appName, String jobName, String tag, String sourceEnv) {
                openshift.withCluster() {
                    openshift.withProject("${sourceEnv}") {
                        echo "Tagging ${appName} image with version ${tag}"
                        openshift.tag("${sourceEnv}/${repoName}:latest", "${repoName}:${tag}")
                    }
                }
            }