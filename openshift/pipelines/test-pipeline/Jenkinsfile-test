def TOOLS = 'c2mvws-tools'
def TARGET_ENVIRONMENT = 'c2mvws-test'
def JOB_NAME = 'master'
def TAG = 'test'
def APP_DOMAIN = 'pathfinder.gov.bc.ca'

node{
    stage('Deploy SOAM API to Test'){
       deployStage('Test', TARGET_ENVIRONMENT, 'educ-soam-api', 'soam-api', JOB_NAME, TAG, TOOLS)
    }
    stage('Deploy PEN Request API to Test'){
       deployStage('Test', TARGET_ENVIRONMENT, 'educ-pen-request-api', 'pen-request-api', JOB_NAME, TAG, TOOLS)
    } 
}

def deployStage(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv) {

  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      echo "Tagging image"
      openshift.tag("${toolsEnv}/${repoName}-${jobName}:latest", "${repoName}-${jobName}:${tag}")
      def dcTemplate = openshift.process('-f',
        'api.dc.yaml',
        "REPO_NAME=${repoName}",
        "JOB_NAME=${jobName}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${appName}",
        "HOST_ROUTE=${appName}-${TARGET_ENVIRONMENT}.${APP_DOMAIN}",
        "TAG=${tag}"
      )

      echo "Applying Deployment ${repoName}"
      def dc = openshift.apply(dcTemplate).narrow('dc')

      echo "Waiting for deployment to roll out"
      // Wait for deployments to roll out
      timeout(10) {
        dc.rollout().status('--watch=true')
      }
    }
  }
}