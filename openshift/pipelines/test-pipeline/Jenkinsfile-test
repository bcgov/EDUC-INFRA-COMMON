pipeline{
    environment{
      TOOLS = 'c2mvws-tools'
      TEST = 'c2mvws-test'

      JOB_NAME = 'master'
      TAG = 'test'
      TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
  }

    stage('Deploy SOAM API to Test'){
      steps{
          deployStage('Test', TEST, TEST_HOST_ROUTE, 'educ-soam-api', 'soam-api', JOB_NAME, TAG)
      } 
      post {
        success{
          echo 'Deployment to Test was successful'
        }
        failure{
          echo 'Deployment to Test failed'
        }
      }
    }
    stage('Deploy PEN Request API to Test'){
      steps{
          deployStage('Test', TEST, TEST_HOST_ROUTE, 'educ-pen-request-api', 'pen-request-api', JOB_NAME, TAG)
      } 
      post {
        success{
          echo 'Deployment to Test was successful'
        }
        failure{
          echo 'Deployment to Test failed'
        }
      }
    } 
}

def deployStage(String stageEnv, String projectEnv, String hostRouteEnv, String repoName, String appName, String jobName, String tag) {

  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      echo "Tagging image"
      openshift.tag("${TOOLS}/${repoName}-${jobName}:latest", "${repoName}-${jobName}:${tag}")
      def dcTemplate = openshift.process('-f',
        'api.dc.yaml',
        "REPO_NAME=${repoName}",
        "JOB_NAME=${jobName}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${appName}",
        "HOST_ROUTE=${hostRouteEnv}",
        "TAG=${tag}"
      )

      echo "Applying Deployment ${repoName}"
      def dc = openshift.apply(dcTemplate).narrow('dc')

      echo "Waiting for deployment to roll out"
      // Wait for deployments to roll out
      timeout(10) {
        dc.rollout().status('--watch=true')
      }
    }
  }
}