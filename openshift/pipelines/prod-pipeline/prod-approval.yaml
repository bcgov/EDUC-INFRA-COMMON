---
apiVersion: template.openshift.io/v1
kind: Template
labels: 
  template: prod-template
metadata: 
  name: prod-template
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata: 
    name: "prod-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: | 
            def APPROVERS = 'NONE'
            def IDIR = 'NONE'
            def IDIR_PW = 'NONE'
            def DIGITAL_ID_API_VERSION = '<Not Required>'
            def PEN_DEMOG_API_VERSION = '<Not Required>'
            def PEN_REQUEST_API_VERSION = '<Not Required>'
            def PEN_REQUEST_EMAIL_API_VERSION = '<Not Required>'
            def SERVICES_CARD_API_VERSION = '<Not Required>'
            def SOAM_API_VERSION = '<Not Required>'
            def STUDENT_API_VERSION = '<Not Required>'
            def PEN_REQUEST_VERSION = '<Not Required>'
            def STAFF_ADMIN_VERSION = '<Not Required>'
            
            def TOOLS = 'c2mvws-test'
            def TARGET_ENVIRONMENT = 'c2mvws-prod'
            def JOB_NAME = 'master'
            def STAGING_ENV = 'Prod'
            def APP_DOMAIN = 'pathfinder.gov.bc.ca'
            
            pipeline {
                environment {
                   APPROVERS = ''
                }
                agent {
                   kubernetes {
                     label 'mavenPod-prod'
                     cloud 'openshift'
                     defaultContainer 'jnlp'
                     serviceAccount 'jenkins'
                     yaml """
                       kind: Pod
                       metadata:
                         name: jenkins-slave
                       spec:
                         containers:
                         - name: jnlp
                           image: registry.access.redhat.com/openshift3/jenkins-agent-maven-35-rhel7
                           privileged: false
                           alwaysPullImage: false
                           workingDir: /tmp
                           ttyEnabled: false
                           resourceRequestCpu: 3
                           resourceRequestMemory: 2Gi
                           resourceLimitCpu: 3
                           resourceLimitMemory: 2Gi
                           env:
                           - name: PEN_DEMOG_API_VERSION_CONF
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: PEN_DEMOG_API_VERSION
                           - name: DIGITAL_ID_API_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: DIGITAL_ID_API_VERSION
                           - name: PEN_REQUEST_API_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: PEN_REQUEST_API_VERSION
                           - name: PEN_REQUEST_EMAIL_API_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: PEN_REQUEST_EMAIL_API_VERSION
                           - name: PEN_REQUEST_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: PEN_REQUEST_VERSION
                           - name: SERVICES_CARD_API_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: SERVICES_CARD_API_VERSION
                           - name: SOAM_API_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: SOAM_API_VERSION
                           - name: STAFF_ADMIN_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: STAFF_ADMIN_VERSION
                           - name: STUDENT_API_VERSION_VALUE
                             valueFrom:
                               configMapKeyRef:
                                 name: 'prod-versions-config-map'
                                 key: STUDENT_API_VERSION                                 
                           - name: DIGITALV_ID_API_VERSION_CONF
                             valueFrom:
                               secretKeyRef:
                                 name: 'soam-api-secrets'
                                 key: sonarqube-token
                           volumeMounts:
                           - mountPath: '/home/jenkins/.m2'
                             name: pvc
                         volumes:
                         - name: pvc
                           persistentVolumeClaim:
                             claimName: 'maven-slave-pvc'
                             
                     """
                   }
                }
                stages {
                    stage('Select Versions for Deployment') {
                        steps {
            			    script {
            			        echo "DIGITAL ID VERSION: ${DIGITAL_ID_API_VERSION_VALUE}"
            			        echo "PEN DEMOG VERSION: ${PEN_DEMOG_API_VERSION_CONF}"
            			        echo "PEN REQUEST API VERSION: ${PEN_REQUEST_API_VERSION_VALUE}"
            			        echo "PEN REQUEST EMAIL API VERSION: ${PEN_REQUEST_EMAIL_API_VERSION_VALUE}"
            			        echo "PEN REQUEST VERSION: ${PEN_REQUEST_VERSION_VALUE}"
            			        echo "SERVICES CARD API VERSION: ${SERVICES_CARD_API_VERSION_VALUE}"
            			        echo "SOAM API VERSION: ${SOAM_API_VERSION_VALUE}"
            			        echo "STAFF ADMIN VERSION: ${STAFF_ADMIN_VERSION_VALUE}"
            			        echo "STUDENT API VERSION: ${STUDENT_API_VERSION_VALUE}"
                                // Get the input
                                def tagInput = input(
                                        id: 'tagInput', message: 'Please enter the version number for each component to be tagged/deployed:',
                                        parameters: [
            
                                                string(defaultValue: "${DIGITAL_ID_API_VERSION_VALUE}",
                                                        description: 'Enter Digital Identity API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'DIGITAL_ID_API_VERSION'),
                                                string(defaultValue: "${PEN_DEMOG_API_VERSION_CONF}",
                                                        description: 'Enter PEN Demog API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'PEN_DEMOG_API_VERSION'),
                                                string(defaultValue: "${PEN_REQUEST_API_VERSION_VALUE}",
                                                        description: 'Enter PEN Request API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'PEN_REQUEST_API_VERSION'),
                                                string(defaultValue: "${PEN_REQUEST_EMAIL_API_VERSION_VALUE}",
                                                        description: 'Enter PEN Request Email API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'PEN_REQUEST_EMAIL_API_VERSION'),
                                                string(defaultValue: "${SERVICES_CARD_API_VERSION_VALUE}",
                                                        description: 'Enter Services Card API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'SERVICES_CARD_API_VERSION'),
                                                string(defaultValue: "${SOAM_API_VERSION_VALUE}",
                                                        description: 'Enter SOAM API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'SOAM_API_VERSION'),
                                                string(defaultValue: "${STUDENT_API_VERSION_VALUE}",
                                                        description: 'Enter Student API Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'STUDENT_API_VERSION'),
                                                string(defaultValue: "${PEN_REQUEST_VERSION_VALUE}",
                                                        description: 'Enter PEN Request Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'PEN_REQUEST_VERSION'),
                                                string(defaultValue: "${STAFF_ADMIN_VERSION_VALUE}",
                                                        description: 'Enter Staff Admin Version, leave the tag blank if this service is not to be deployed',
                                                        name: 'STAFF_ADMIN_VERSION'),
                                        ])
            					// Save to variables. Default to empty string if not found.
                                DIGITAL_ID_API_VERSION = tagInput.DIGITAL_ID_API_VERSION?:''
                                PEN_DEMOG_API_VERSION = tagInput.PEN_DEMOG_API_VERSION?:''
            					PEN_REQUEST_API_VERSION = tagInput.PEN_REQUEST_API_VERSION?:''
            					PEN_REQUEST_EMAIL_API_VERSION = tagInput.PEN_REQUEST_EMAIL_API_VERSION?:''
            					SERVICES_CARD_API_VERSION = tagInput.SERVICES_CARD_API_VERSION?:''
            					SOAM_API_VERSION = tagInput.SOAM_API_VERSION?:''
            					STUDENT_API_VERSION = tagInput.STUDENT_API_VERSION?:''
            					PEN_REQUEST_VERSION = tagInput.PEN_REQUEST_VERSION?:''
            					STAFF_ADMIN_VERSION = tagInput.STAFF_ADMIN_VERSION?:''
            				}
                        }
                    }
                    stage('Deployment Credentials & Approval') {
                        steps {
            			    script {
                                // Get the input
                                def userInput = input(
                                        id: 'userInput', message: 'Please enter your IDIR info:',
                                        parameters: [
            
                                                string(defaultValue: '',
                                                        description: 'Your IDIR username',
                                                        name: 'IDIR'),
                                                password(defaultValue: '',
                                                        description: 'Your IDIR password',
                                                        name: 'password'),
                                        ])
            					// Save to variables. Default to empty string if not found.
                                IDIR = userInput.IDIR?:''
                                IDIR_PW = userInput.password?:''
            				}
            				
                            sh """
                              set +x
                              echo Running curl command...
                              curl -u ${IDIR}:${IDIR_PW} https://gww.svn.educ.gov.bc.ca/svn/repos/openshiftadmins_repos/getmypen/approvers/pipeline-approvers.txt -o /tmp/pipeline-approvers.txt
                            """
                            script {
                                APPROVERS = sh(script: 'cat /tmp/pipeline-approvers.txt', returnStdout: true)
                            }
                            timeout(time:2, unit:'DAYS')
                     	    {
                     	       echo "List of Approvers: ${APPROVERS}"
                               input message: 'Do you approve this deployment to Production?', submitter: "${APPROVERS}"
                            }
                        }
                    }
            		stage('Deploy Digital ID API to Prod'){
            		    when {
            				expression {
            					return "${DIGITAL_ID_API_VERSION}" != "<Not Required>" && "${DIGITAL_ID_API_VERSION}" != "";
            				}
            			}
            			steps {
            				deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-digitalid-api', 'digitalid-api', JOB_NAME, "${DIGITAL_ID_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
            		stage('Deploy PEN Demographics API to Prod'){
            		    when {
            				expression {
            					return "${PEN_DEMOG_API_VERSION}" != "<Not Required>" && "${PEN_DEMOG_API_VERSION}" != "";
            				}
            			}
            			steps {
            			   deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-pen-demog-api', 'pen-demographics-api', JOB_NAME, "${PEN_DEMOG_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
            		stage('Deploy PEN Request API to Prod'){
            		    when {
            				expression {
            					return "${PEN_REQUEST_API_VERSION}" != "<Not Required>" && "${PEN_REQUEST_API_VERSION}" != "";
            				}
            			}
            			steps {
            			   deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-pen-request-api', 'pen-request-api', JOB_NAME, "${PEN_REQUEST_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		} 
            		stage('Deploy PEN Request Email API to Prod'){
            		    when {
            				expression {
            					return "${PEN_REQUEST_EMAIL_API_VERSION}" != "<Not Required>" && "${PEN_REQUEST_EMAIL_API_VERSION}" != "";
            				}
            			}
            			steps {
            		       deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-pen-request-email-api', 'pen-request-email-api', JOB_NAME, "${PEN_REQUEST_EMAIL_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
            		stage('Deploy Services Card API to Prod'){
            		    when {
            				expression {
            					return "${SERVICES_CARD_API_VERSION}" != "<Not Required>" && "${SERVICES_CARD_API_VERSION}" != "";
            				}
            			}
            			steps {
            		       deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-services-card-api', 'services-card-api', JOB_NAME, "${SERVICES_CARD_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
            		stage('Deploy SOAM API to Prod'){
            		    when {
            				expression {
            					return "${SOAM_API_VERSION}" != "<Not Required>" && "${SOAM_API_VERSION}" != "";
            				}
            			}
            			steps {
            		       deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-soam-api', 'soam-api', JOB_NAME, "${SOAM_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
            		stage('Deploy Student API to Prod'){
            		    when {
            				expression {
            					return "${STUDENT_API_VERSION}" != "<Not Required>" && "${STUDENT_API_VERSION}" != "";
            				}
            			}
            			steps {
            		       deployStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-api', 'student-api', JOB_NAME, "${STUDENT_API_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
            		stage('Deploy PEN Request Frontend and Backend to Prod'){
            		    when {
            				expression {
            					return "${PEN_REQUEST_VERSION}" != "<Not Required>" && "${PEN_REQUEST_VERSION}" != "";
            				}
            			}
            			steps {
            		       deployUIStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-pen-request', 'pen-request', JOB_NAME, "${PEN_REQUEST_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
            		stage('Deploy Student Admin Frontend and Backend to Prod'){
            		    when {
            				expression {
            					return "${STAFF_ADMIN_VERSION}" != "<Not Required>" && "${STAFF_ADMIN_VERSION}" != "";
            				}
            			}
            			steps {
            		       deployUIStage(STAGING_ENV, TARGET_ENVIRONMENT, 'educ-student-admin', 'student-admin', JOB_NAME, "${STAFF_ADMIN_VERSION}", TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN)
            			}
            		}
                }
            }
            
            def deployStage(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv, String targetEnvironment, String appDomain) {
              openshift.withCluster() {
            	openshift.withProject(projectEnv) {
            	  echo "Tagging ${appName} image with version ${tag}"
            	  openshift.tag("${toolsEnv}/${repoName}-${jobName}:${tag}", "${repoName}-${jobName}:${tag}")
            	  def dcTemplate = openshift.process('-f',
            		"https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/openshift/pipelines/deployment-config/api.dc.yaml",
            		"REPO_NAME=${repoName}",
            		"JOB_NAME=${jobName}",
            		"NAMESPACE=${projectEnv}",
            		"APP_NAME=${appName}",
            		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
            		"TAG=${tag}"
            	  )
            
            	  echo "Applying Deployment for ${appName}"
            	  def dc = openshift.apply(dcTemplate).narrow('dc')
            	}
              }
            }
            
            def deployUIStage(String stageEnv, String projectEnv, String repoName, String appName, String jobName, String tag, String toolsEnv, String targetEnvironment, String appDomain) {
              openshift.withCluster() {
            	openshift.withProject(projectEnv) {
            	  echo "Tagging Image ${repoName}-backend:${jobName} with version ${tag}"
            	  openshift.tag("${toolsEnv}/${repoName}-backend:${tag}", "${repoName}-backend:${tag}")
            
            	  echo "Tagging Image ${repoName}-frontend-static:${jobName} with version ${tag}"
            	  openshift.tag("${toolsEnv}/${repoName}-frontend-static:${tag}", "${repoName}-frontend-static:${tag}")
            	
            	
            	  echo "Processing DeploymentConfig ${appName}-backend..."
            	  def dcBackendTemplate = openshift.process('-f',
            		"https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/openshift/pipelines/deployment-config/uibackend.dc.yaml",
            		"REPO_NAME=${repoName}",
            		"JOB_NAME=${jobName}",
            		"NAMESPACE=${projectEnv}",
            		"APP_NAME=${appName}",
            		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
            		"TAG=${tag}"
            	  )
            		
            	  def dcBackend = openshift.apply(dcBackendTemplate).narrow('dc')
            
            	  echo "Processing DeploymentConfig ${appName}-frontend-static..."
            	  def dcFrontendStaticTemplate = openshift.process('-f',
            		"https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/openshift/pipelines/deployment-config/uifrontend.dc.yaml",
            		"REPO_NAME=${repoName}",
            		"JOB_NAME=${jobName}",
            		"NAMESPACE=${projectEnv}",
            		"APP_NAME=${appName}",
            		"HOST_ROUTE=${appName}-${targetEnvironment}.${appDomain}",
            		"TAG=${tag}"
            	  )
            
            	  echo "Applying Deployment ${appName}-frontend-static..."
            	  def dcFrontendStatic = openshift.apply(dcFrontendStaticTemplate).narrow('dc')
            	}
              }
            }
      type: JenkinsPipeline