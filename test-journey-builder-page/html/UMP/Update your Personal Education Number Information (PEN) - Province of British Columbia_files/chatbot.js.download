// Dialogflow Messenger documentation: https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger

//Globals
var cbOpenState = "OPEN";
var cbCloseState = "CLOSE";
var localSesExpTime = 60000 * 30;

/*
 * Event handler for when Dialogflow Messenger is loaded
 */
window.addEventListener('dfMessengerLoaded', function (event) {

	const dfMessenger = document.querySelector('df-messenger');	
	
	// RA-1353: no-op if no df-messenger element can be found
	if ( !dfMessenger ) {
		return;
	}
	
	// Load the initial bot message into the messenger window
	populateInitialMessage();
	
	// RA-1344: Set max-height on chatbot window,- only for non-mobile
	const style = document.createElement('style');
	const nonMobileMinWidth = 501; // Breakpoint where DF Messenger switches between mobile/non-mobile styles
    style.textContent = '@media screen and (min-width: ' + nonMobileMinWidth + 'px) { .chat-wrapper { max-height: 65% } }';
	dfMessenger.shadowRoot.querySelector('df-messenger-chat')
		.shadowRoot.appendChild(style);
	
	// RA-1341: Fix for chat window sizing issue in Safari mobile
	if(/iPhone/i.test(navigator.userAgent)) {
		dfMessenger.shadowRoot.querySelector('df-messenger-chat')
	 		.shadowRoot.querySelector('df-messenger-user-input')
	 		.shadowRoot.querySelector('input[type="text"]')
	 		.setAttribute('style','font-size: 16px');	
	}

	// RA-1365: additional snowplow analytics
	dfMessenger.addEventListener('df-request-sent', function(event) {
		requestSentHandler(event);
	});
	
    // Event handler for when a bot response is received
	dfMessenger.addEventListener('df-response-received', function (event) {		
		// RA-1365: additional snowplow analytics
		responseReceivedHandler(event);
	});
		
	// RA-1365: additional snowplow analytics
	dfMessenger.addEventListener('df-messenger-error', function(event) {
		messengerErrorHandler(event);
	});
	
	//RA-1356
	setupPersistantState();
	
	// RA-1352: add snowplow analytics handlers
	setupAnalytics();
	
	// RA-1354: Fix for IE11 issue due to not supporting CSS variables
	addLegacyBrowserSupport();
	
	// RA-1340: Keyboard navigation
	setupKeyboardNavigation();
	
	//Chatbot History
	saveChatHistory();
	
});	


//There are two variables we need to look at when loading a chatbot conversation:
//According to the chatCookie, has the client requested that the chatbot dialogue box be closed?
//Is There an existing ongoing chat? 

//Case 1: The chatbot cookie is not set. There is no chat history
//Case 2: The chatbot cookie is not set. THere is a chat history
//Case 3: The chatbot cookie is set to CLOSE. There is no chat history
//Case 4: The chatbot cookie is set to CLOSE. There is a chat history
//Case 5: The chatbot cookie is set to OPEN. There is no chat history
//Case 6: The chatbot cookie is set to OPEN. There is a chat history
function saveChatHistory(){
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	
	var chatCookie = getCookie("cbState");
	//let sessionStorageName = getSessionConversationName();
	//var existingConvo = sessionStorage.getItem(sessionStorageName);
	var existingConvo = getLocalVarWithExp(getSessionConversationName());

	if(!chatCookie && !existingConvo){
		//In this state, a welcome message is displayed. The user must click into the widget to activate
		//Add listeners to effected elements
		//chat window action by button
		const dfButtonWidgetIcon = dfMessenger.shadowRoot.querySelector('button#widgetIcon');
		if ( null != dfButtonWidgetIcon ) {
			dfButtonWidgetIcon.addEventListener('click',actionChatBotHistoryListener);
		}
		//chat window action by MESSAGE
		const dfWelcomeMessage = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#messageList');
		if ( null != dfWelcomeMessage ) {
			dfWelcomeMessage.addEventListener('click', actionChatBotHistoryListener);
		}
		
	} else if(!chatCookie && existingConvo){
		//We really should never get here
		
	} else if(chatCookie === cbCloseState && !existingConvo){
		//Nothing to populate
		//Activate listeners only
		const dfButtonWidgetIcon = dfMessenger.shadowRoot.querySelector('button#widgetIcon');
		if ( null != dfButtonWidgetIcon ) {
			dfButtonWidgetIcon.addEventListener('click',actionChatBotHistoryListener);
		}
		//chat window action by MESSAGE
		const dfWelcomeMessage = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#messageList');
		if ( null != dfWelcomeMessage ) {
			dfWelcomeMessage.addEventListener('click', actionChatBotHistoryListener);
		}
		
	} else if(chatCookie === cbCloseState && existingConvo){
		//Nothing to populate
		//Activate Listeners Only
		//!! Once the user clicks into the chat box to expaned, the default state is the mini box
		//We must expand and populate it
		//WE require a different callback method here
		const dfButtonWidgetIcon = dfMessenger.shadowRoot.querySelector('button#widgetIcon');
		if ( null != dfButtonWidgetIcon ) {
			dfButtonWidgetIcon.addEventListener('click',actionChatBotHistoryListenerWithOpen);
		}
		//chat window action by MESSAGE
		const dfWelcomeMessage = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#messageList');
		if ( null != dfWelcomeMessage ) {
			dfWelcomeMessage.addEventListener('click', actionChatBotHistoryListenerWithOpen);
		}
	
		
	} else if(chatCookie === cbOpenState && !existingConvo){
		//Since there is no existing converstaion, we simply activate the listeners
		const dfButtonWidgetIcon = dfMessenger.shadowRoot.querySelector('button#widgetIcon');
		if ( null != dfButtonWidgetIcon ) {
			dfButtonWidgetIcon.addEventListener('click',actionChatBotHistoryListener);
		}
		//chat window action by MESSAGE
		const dfWelcomeMessage = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#messageList');
		if ( null != dfWelcomeMessage ) {
			dfWelcomeMessage.addEventListener('click', actionChatBotHistoryListener);
		}
		
	} else if(chatCookie === cbOpenState && existingConvo){
		//The chatbot is in an open state - we just open the full dialogue box - since the default state is just a small info field	
		//Expand the window
		dfMessenger.shadowRoot.querySelector('df-messenger-chat')
			.shadowRoot.querySelector('df-message-list')
			.shadowRoot.querySelector('div.message-list-wrapper div#messageList')
			.click();
		
		//Now populate the window
		cBotHistoryPopulate();
		
		//Enable the Listeners
		//Window is open, listener should be running regardless of button presses
		actionChatBotHistoryListener();
		
		const dfButtonWidgetIcon = dfMessenger.shadowRoot.querySelector('button#widgetIcon');
		if ( null != dfButtonWidgetIcon ) {
			dfButtonWidgetIcon.addEventListener('click',actionChatBotHistoryListener);
		}
		//chat window action by MESSAGE
		const dfWelcomeMessage = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#messageList');
		if ( null != dfWelcomeMessage ) {
			dfWelcomeMessage.addEventListener('click', actionChatBotHistoryListener);
		}
	}
}


//!! On button click, it is important that the cookie value be set before History Saver is set
//Here we load the Mutation Observer
//Only load the Mutation Observer if the chat window is open (else there is no target div to observe
function actionChatBotHistoryListener(){

	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	var chatCookie = getCookie("cbState");	
	var target = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div#messageList');
	var config = { characterData: false, attributes: false, childList: true, subtree: false };	//This captures changes in the DIV
	var observer = new MutationObserver( cBotHistorySave );
		
	if(chatCookie === cbOpenState){
		observer.observe(target, config);		
	} else{
		observer.disconnect();
	}
}

function actionChatBotHistoryListenerWithOpen(){

	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	var chatCookie = getCookie("cbState");	
	var target = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div#messageList');
	var config = { characterData: false, attributes: false, childList: true, subtree: false };	//This captures changes in the DIV
	var observer = new MutationObserver( cBotHistorySave );
		
	if(chatCookie === cbOpenState){
		//We only observe when the window is open. If there was a previous history, we should populate it
		//THe default state is to oepn a mini dialogue box
		//We need to auto expand this
		
		//Expand the window
		dfMessenger.shadowRoot.querySelector('df-messenger-chat')
			.shadowRoot.querySelector('df-message-list')
			.shadowRoot.querySelector('div.message-list-wrapper div#messageList')
			.click();
		
		//Auto Populate
		cBotHistoryPopulate();
		
		//Observe
		observer.observe(target, config);

	} else{
		observer.disconnect();
	}
}

//Persist Chat to Browser Session
//We will append the session ID as part of the chat identifier
function cBotHistorySave(mutations){
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}	
	
	// Ensure all chat messages will render their HTML properly
	processBotMessages();
	
	var conversationBox = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div#messageList');
	
	const now = new Date();
	var expTime = now.getTime()+localSesExpTime;
	setLocalVarWithExp(getSessionConversationName(),conversationBox.innerHTML,expTime);
}


//reload previous history
function cBotHistoryPopulate(){
	
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}

	var existingConvo = getLocalVarWithExp(getSessionConversationName());
	
	var conversationBox = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div#messageList');
	
	if(existingConvo){
		conversationBox.innerHTML = existingConvo;
		//Scroll to Bottom
		var temp = conversationBox.scrollHeight;
		var lastChildHeight = conversationBox.lastChild.offsetHeight+15;
		conversationBox.scrollTop = conversationBox.scrollHeight-lastChildHeight;
	}	
}

function getSessionConversationName(){
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	var sessionId = dfMessenger.getAttribute("agent-id");
	let sessionConversationName = "cbConvo_"+sessionId;
	return sessionConversationName;
}



function setLocalVarWithExp(key, value, expTime){
	const chatObject = {
			value:value,
			expTime:expTime
	}
	localStorage.removeItem(key);
	localStorage.setItem(key, JSON.stringify(chatObject));
}

function getLocalVarWithExp(key){
	const storageObject = localStorage.getItem(key);
	if (!storageObject) {
		return;
	}
	
	const chatObj = JSON.parse(storageObject);
	const now = new Date();
	var nowTime = now.getTime();
	var exp = chatObj.expTime;
	
	
	// compare the expiry time
	if (now.getTime() > chatObj.expTime) {
		// If the item is expired, delete the item from storage
		// and return null
		localStorage.removeItem(key)
		return null;
	}
	return chatObj.value;
	
}


function responseReceivedHandler(event) {
	// RA-1343: Process bot responses and render HTML
	processBotMessages();	
		
	// RA-1365: additional Snowplow analytics
	var responseIntent = event.detail.response.queryResult.intent.displayName;
	window.snowplow('trackSelfDescribingEvent', {
        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
        data: 
        {           
        	action : "get_answer",
        	text : responseIntent
        }
	});	
	
}

function requestSentHandler(event) {
	window.snowplow('trackSelfDescribingEvent', {
        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
        data: 
        {           
        	action : "ask_question"         
        }
	});	
}

function messengerErrorHandler(event) {
	window.snowplow('trackSelfDescribingEvent', {
        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
        data: 
        {           
        	code : event.error.code,
        	message : event.error.message,
        	status : event.error.status
        }
	});		
}

function setupPersistantState(){
	
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	
	//initialize state if cookie is set
	var chatCookie = getCookie("cbState");
	if ( chatCookie ) {
		if(chatCookie === cbOpenState){
			//Default state is to open. No Action required.
		}
		else{
			//const divChatWrapper = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('.chat-wrapper');
			//divChatWrapper.setAttribute("opened", "false");
			dfMessenger.removeAttribute("expand");
		}
	}

	//Set up event listener for button click
	const dfButtonWidgetIcon = dfMessenger.shadowRoot.querySelector('button#widgetIcon');
	if ( null != dfButtonWidgetIcon ) {
		dfButtonWidgetIcon.addEventListener('click',buttonWidgetIconCallbackFuction);
	}
	
	//Setup event listener for dismiss icon
	const dfDismissIcon = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#dismissIcon');
	if ( null != dfDismissIcon ) {
		dfDismissIcon.addEventListener('click',dismissIconCallbackFuction);
	}
	
	//Setup event for chatwidow click
	const dfChatWindow = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
	.shadowRoot.querySelector('df-message-list')
	.shadowRoot.querySelector('div.message-list-wrapper div#messageList');
	if(dfChatWindow){
		dfChatWindow.addEventListener('click',dialogueOpenCallbackFuction);
	}
}

function dismissIconCallbackFuction(){
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	setCookie("cbState", cbCloseState, 1);
	
}

function dialogueOpenCallbackFuction(){
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	setCookie("cbState", cbOpenState, 1);
	
}

function buttonWidgetIconCallbackFuction(){
	const dfMessenger = document.querySelector('df-messenger');
	//NOP
	if ( !dfMessenger ) {
		return;
	}
	
	const divChatWrapper = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('.chat-wrapper');
	if(divChatWrapper.getAttribute('opened') === 'true'){
		setCookie("cbState", cbCloseState, 1);
	} else {
		setCookie("cbState", cbOpenState, 1);
	}	
}


function setCookie(cookieName, cookieValue, expDate) {
	var date = new Date();
	date.setTime(date.getTime() + (expDate * 24 * 60 * 60 * 1000));
	var expires = "expires="+date.toUTCString();
	//expDate parameter removed. This will terminate cookie at browser close
	//document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
	document.cookie = cookieName + "=" + cookieValue + ";path=/";
}

function getCookie(cookieName) {
	var name = cookieName + "=";
	var cookieAll = document.cookie.split(';');
	for(var i = 0; i < cookieAll.length; i++) {
		var c = cookieAll[i];
	    while (c.charAt(0) == ' ') {
	    	c = c.substring(1);
	    }
	    if (c.indexOf(name) == 0) {
	    	return c.substring(name.length, c.length);
	    }
	}
	return "";
}

//RA-1352: add handlers for snowplow analytics
function setupAnalytics() {
	
	const dfMessenger = document.querySelector('df-messenger');
	
	// RA-1353: no-op if no df-messenger element can be found
	if ( !dfMessenger ) {
		return;
	}
	
	const divChatWrapper = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('.chat-wrapper');
	if(hasClass(divChatWrapper, "chat-min")){
		window.snowplow('trackSelfDescribingEvent', {
		        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
		        data: 
		        {           
		        	action : "hello"         
		        }
		});
	}
	
	const dfButtonWidgetIcon = dfMessenger.shadowRoot.querySelector('button#widgetIcon');
	if ( null != dfButtonWidgetIcon ) {
		dfButtonWidgetIcon.addEventListener('click', widgetIconClickHandlerCallback);
	}

	const dfWelcomeMessage = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#messageList');
	if ( null != dfWelcomeMessage ) {
		dfWelcomeMessage.addEventListener('click', welcomeMessageClickHandlerCallback);
	}

	const dfDismissIcon = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('df-message-list').shadowRoot.querySelector('div.message-list-wrapper div#dismissIcon');
	if ( null != dfDismissIcon ) {
		dfDismissIcon.addEventListener('click', dismissIconClickHandlerCallback);
	}
	
}

function hasClass( target, className ) {
    return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
}

function widgetIconClickHandlerCallback() {
	const dfMessenger = document.querySelector('df-messenger');
	const divChatWrapper = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('.chat-wrapper');
	if(!hasClass(divChatWrapper, "chat-min")){
		if(divChatWrapper.getAttribute('opened') === 'true'){
			window.snowplow('trackSelfDescribingEvent', {
			        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
			        data: 
			        {           
			        	action : "close",
			        	text : "icon"
			        }
			});
			//
			updateIconAriaLabel('Open');

		} else {
			window.snowplow('trackSelfDescribingEvent', {
			        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
			        data: 
			        {
			        	action : "open",           
			        	text : "icon"         
			        }
			});
			//
			updateIconAriaLabel('Close');
		}
	}
}

function welcomeMessageClickHandlerCallback() {
	const dfMessenger = document.querySelector('df-messenger');
	const divChatWrapper = dfMessenger.shadowRoot.querySelector('df-messenger-chat').shadowRoot.querySelector('.chat-wrapper');
	if (divChatWrapper.getAttribute('opened') === 'true') {
		window.snowplow('trackSelfDescribingEvent', {
		        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
		        data: 
		        {           
		        	action : "open",           
		        	text : "hello"         
		        }
		});
		//
		updateIconAriaLabel('Close');
	}
}

function dismissIconClickHandlerCallback() {
	window.snowplow('trackSelfDescribingEvent', {
        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
        data: 
        {           
        	action : "close",
        	text : "x"
        }
	});
}

function messageHyperlinkClickHandlerCallback(event) {
	var href = event.currentTarget.href;
	window.snowplow('trackSelfDescribingEvent', {
        schema: 'iglu:ca.bc.gov.chatbot/chatbot/jsonschema/1-0-0',
        data: 
        {
        	action : "link_click",           
        	text : href         
        }
	});
}

function populateInitialMessage() {
	
	const dfMessenger = document.querySelector('df-messenger');
	// Load the message from the hidden page element
	const initialMessageContainer = document.querySelector('#chatbot-initial-message');
	if(initialMessageContainer) {
		const initialMessageHtml = initialMessageContainer.innerHTML;
		if(initialMessageHtml.length > 0) {
			// Render the message in the chatbot
			dfMessenger.renderCustomText(initialMessageHtml);		
			
			// Process the message so it displays html, has click handlers etc
			processBotMessages();

			const nonMobileMinWidth = 501; // Breakpoint where DF Messenger switches between mobile/non-mobile styles
			// Show the initial message immediately if on a larger screen (non-mobile)
			if(document.documentElement.clientWidth >= nonMobileMinWidth) {
				dfMessenger.showMinChat();
			}			
		}
	}
}

function processBotMessages() {

	// Need to delay function calls or else the timing isn't right
	setTimeout(function () {

		// Process text responses
		processTextResponses();
	
		// Process card responses
		processCardResponses();
		
		// Add other response types here as required
		// ...

		// Make all messages navigable/focusable
		const dfMessenger = document.querySelector('df-messenger');				
		const messages = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
			.shadowRoot.querySelector('df-message-list')
			.shadowRoot.querySelector('#messageList').querySelectorAll('.message');
			
			messages.forEach(function(message) {
				message.setAttribute('tabindex', '-1');
			})
		
    }, 100);		
	
}

function processTextResponses() {

	const dfMessenger = document.querySelector('df-messenger');		
	
	const botMessages = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
		.shadowRoot.querySelector('df-message-list')
		.shadowRoot.querySelector('#messageList')
		.querySelectorAll('.bot-message');
	
	botMessages.forEach(function(message) {
		processMessageHtml(message);
	})	
}

function processCardResponses() {

	const dfMessenger = document.querySelector('df-messenger');		
	
	const botCards = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
		.shadowRoot.querySelector('df-message-list')
		.shadowRoot.querySelector('#messageList')
		.querySelectorAll('df-card');
		
	botCards.forEach(function(card) {			
		const descriptionLines = card.shadowRoot.querySelector('df-description')
			.shadowRoot.querySelectorAll('.description-line');
		
		descriptionLines.forEach(function(desc) {
			processMessageHtml(desc);
		})	
	})		
}

function processMessageHtml(element) {
	
	// If element hasn't previously been processed, override the innerHTML with the innerText value
	if(!element.classList.contains('bcgov-message-processed')) {
		element.innerHTML = element.textContent;	
		
		// RA-1365: add click event handlers to any anchor tags in the response
		const dfMessageLinks = element.querySelectorAll('a');
		dfMessageLinks.forEach(function(link) {
			link.onclick = messageHyperlinkClickHandlerCallback;
		});		
			
		element.classList.add('bcgov-message-processed');			
	}
}

function addLegacyBrowserSupport() {

	// Check if the browser has support for CSS custom properties (IE11 does not). If unsupported, manually attach additional styles.
	if(!window.CSS || !window.CSS.supports || !window.CSS.supports('--a', 0)) {
	//if(true) {
		const dfMessenger = document.querySelector('df-messenger');

		// Find the style tag containing the CSS variables (should be directly above df-messenger)
		const chatbotStyleTag = dfMessenger.previousElementSibling;	
		let chatbotStyles = chatbotStyleTag.textContent
		// Remove whitespace and other parts of the string that aren't needed
		chatbotStyles = chatbotStyles.replace(/\s+/g, '');
		chatbotStyles = chatbotStyles.replace('df-messenger{', '');
		chatbotStyles = chatbotStyles.replace('}', '');	
		chatbotStyles = chatbotStyles.split(';');

		// Create map of CSS property name-value pairs
		let cssNameValueMap = new Map();
		chatbotStyles.forEach(function(style) {
			let cssNameValuePair = style.split(':');
			cssNameValueMap.set(cssNameValuePair[0], cssNameValuePair[1]);
		});		

		// Set chatbot icon colour
		const iconColour = document.createElement('style')
	    iconColour.textContent = 
	    	'.df-messenger-1 button.df-messenger#widgetIcon { background-color: ' + cssNameValueMap.get('--df-messenger-button-titlebar-color') + '; }';
		dfMessenger.shadowRoot.appendChild(iconColour);		
		
		// Set chatbot title bar colour
		const titleBarColour = document.createElement('style')
	    titleBarColour.textContent = 
	    	'.df-messenger-titlebar-1 .title-wrapper.df-messenger-titlebar { background-color: ' + cssNameValueMap.get('--df-messenger-button-titlebar-color') + '; }';
		dfMessenger.shadowRoot.querySelector('df-messenger-chat')
			.shadowRoot.querySelector('df-messenger-titlebar')
			.shadowRoot.appendChild(titleBarColour);				

		// Set chatbot send icon colour
		const sendIconColour = document.createElement('style')
	    sendIconColour.textContent = 
	    	'.df-messenger-user-input-1 .df-messenger-user-input .df-messenger-user-input#sendIcon, ' +
	    	'.df-messenger-user-input-1 .df-messenger-user-input .df-messenger-user-input#sendIcon:hover, ' +
	    	'.df-messenger-user-input-1 .df-messenger-user-input .df-messenger-user-input#sendIcon:active { background-color: ' + cssNameValueMap.get('--df-messenger-send-icon') + '; }';
		dfMessenger.shadowRoot.querySelector('df-messenger-chat')
		.shadowRoot.querySelector('df-messenger-user-input')
		.shadowRoot.appendChild(sendIconColour);
		
		// Set chatbot bot message colour
		const botMessageColour = document.createElement('style')
	    botMessageColour.textContent = '.df-message-list-1 .df-message-list#messageList .message.bot-message.df-message-list { background-color: #fff; }';
		dfMessenger.shadowRoot.querySelector('df-messenger-chat')
			.shadowRoot.querySelector('df-message-list')
			.shadowRoot.appendChild(botMessageColour);	
	}	
}

function setupKeyboardNavigation() {

	const dfMessenger = document.querySelector('df-messenger');

	const chatWrapper = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
							.shadowRoot.querySelector('.chat-wrapper');

	const messageList = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
							.shadowRoot.querySelector('df-message-list')
							.shadowRoot.querySelector('#messageList');

	const dismissIcon = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
							.shadowRoot.querySelector('df-message-list')
							.shadowRoot.querySelector('#dismissIcon');	
	
	const chatbotIcon = dfMessenger.shadowRoot.querySelector('#widgetIcon');	

	const chatbotTitle = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
							.shadowRoot.querySelector('df-messenger-titlebar')
							.shadowRoot.querySelector('#dfTitlebar').textContent;		

	const inputField = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
							.shadowRoot.querySelector('df-messenger-user-input')
					 		.shadowRoot.querySelector('input[type="text"]');
	
	inputField.setAttribute('aria-label', 'Ask something');
	
	messageList.setAttribute('aria-label', chatbotTitle)

	// Make elements tabbable if the chatbot is expanded/open
//	const cbStateCookie = getCookie('cbState');
//	if(cbStateCookie && cbStateCookie === cbOpenState) {
		messageList.setAttribute('tabindex','0');	
		dismissIcon.setAttribute('tabindex','0');
//	}
	dismissIcon.setAttribute('aria-label','Dismiss message window');

	chatbotIcon.setAttribute('tabindex','0');
		
	// Add additional attributes for accessibility
	messageList.setAttribute('role', 'log');
	messageList.setAttribute('aria-live', 'polite');
	messageList.setAttribute('aria-atomic', 'false');
	//messageList.setAttribute('aria-relevant', 'additions');

	updateIconAriaLabel('Open');
	
	// Add border to icon when focused
	const chatbotIconStyle = document.createElement('style')
    chatbotIconStyle.textContent = 'button#widgetIcon:focus { outline-width: 1px }';
	dfMessenger.shadowRoot.appendChild(chatbotIconStyle);

	// Add event listener on keydown
	document.addEventListener('keydown', function(e) {

		if(dfMessenger === document.activeElement) {

			if(e.keyCode == 13) { // enter key

				//console.log('enter');
				
				// Check if focus is on the icon or message list. If so, manually click the element
				const chatbotIconFocused = dfMessenger.shadowRoot.querySelector('#widgetIcon:focus');
				const messageListFocused = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
											.shadowRoot.querySelector('df-message-list')
											.shadowRoot.querySelector('#messageList:focus');
				const dismissIconFocused = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
											.shadowRoot.querySelector('df-message-list')
											.shadowRoot.querySelector('#dismissIcon:focus');				
				
				// If focus currently on icon, click it and set focus on first message
				if(chatbotIconFocused) {
					//console.log('chatbotIcon focused')
					chatbotIconFocused.click();

					const cbStateCookie = getCookie('cbState');
					if(cbStateCookie && cbStateCookie === cbOpenState) {
						messageList.setAttribute('tabindex','0');	
						dismissIcon.setAttribute('tabindex','0');
											
						if(chatWrapper.classList.contains('chat-min')) {
							messageList.focus();						
						}
						else {
							//messageList.querySelector('.message:first-child').focus();		
							inputField.focus();
						}						
					} else {
						messageList.removeAttribute('tabindex');	
						dismissIcon.removeAttribute('tabindex');
						chatbotIconFocused.blur();
					}						

				}
				// If focus currently on message list, click it and set focus on first message
				else if(messageListFocused) {
					//console.log('messageList focused')
					messageList.click();
					//messageList.querySelector('.message:first-child').focus();
					inputField.focus();
				}
				// If focus currently on dismiss icon, click it
				else if(dismissIconFocused) {
					//console.log('dismissIcon focused')
					dismissIcon.click();
					messageList.removeAttribute('tabindex');	
					dismissIcon.removeAttribute('tabindex');				}				
			}

			else if(e.keyCode == 27) { // escape key

				//console.log('esc');
				chatbotIcon.click();
			}

			else if(e.keyCode == 38) { // up key
				
				//console.log('up');
				e.preventDefault();				
				
				const inputFieldFocused = chatWrapper.querySelector('df-messenger-user-input')
											.shadowRoot.querySelector('input:focus');

				const messageFocused = messageList.querySelector('.message:focus');				
				
				// If focus currently on input field, move focus to the message list
				if(inputFieldFocused) {
					messageList.querySelector('.message:last-child').focus();
				}
				// If focus on a message and there is a previous message, move focus to it
				else if(messageFocused && messageFocused.previousSibling && messageFocused.previousSibling.nodeType === 1) {
					messageFocused.previousSibling.focus();
				}
			}

			else if(e.keyCode == 40) { // down key
								
				//console.log('down');	
				e.preventDefault();				
				
				const messageFocused = messageList.querySelector('.message:focus');		
				
				// If focus on a message and there is another message following, shift focus to it. Otherwise shift focus to input field
				if(messageFocused) {
					if(messageFocused.nextSibling) {
						messageFocused.nextSibling.focus();
					}
					else {
						chatWrapper.querySelector('df-messenger-user-input')
							.shadowRoot.querySelector('input').focus();						
					}
				}
			}

		}

	});
}

function updateIconAriaLabel(action) {
	
	const dfMessenger = document.querySelector('df-messenger');	
	const chatbotIcon = dfMessenger.shadowRoot.querySelector('#widgetIcon');	
	const chatbotTitle = dfMessenger.shadowRoot.querySelector('df-messenger-chat')
		.shadowRoot.querySelector('df-messenger-titlebar')
		.shadowRoot.querySelector('#dfTitlebar').textContent;
	
	chatbotIcon.setAttribute('aria-label', action + ' ' + chatbotTitle);		
}