---
apiVersion: v1
kind: Template
labels:
  template: "${NAME}-dc-template"
metadata:
  name: "${NAME}-dc-template"
  creationTimestamp:
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
        template.alpha.openshift.io/wait-for-ready: "true"
      creationTimestamp:
      labels:
        app: "${NAME}"
      name: "${NAME}"
    spec:
      replicas: 1
      selector:
        app: "${NAME}"
        deploymentconfig: "${NAME}"
      strategy:
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          name: "${NAME}"
          labels:
            app: "${NAME}"
            deploymentconfig: "${NAME}"
        spec:
          containers:
            - image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 30
                httpGet:
                  path: "/"
                  port: 8080
              name: "${NAME}"
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 3
                httpGet:
                  path: "/"
                  port: 8080
              resources:
                limits:
                  memory: "500Mi"
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - "${NAME}"
            from:
              kind: ImageStreamTag
              name: "${NAME}:latest"
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${NAME}
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
        service.alpha.openshift.io/serving-cert-secret-name: "student-admin-backend-cert"
      creationTimestamp:
      labels:
        app: "${NAME}"
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: 443-https
          port: 443
          protocol: TCP
          targetPort: 443
      selector:
        app: "${NAME}"
        deploymentconfig: "${NAME}"
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        openshift.io/host.generated: 'true'
      labels:
        app: "${NAME}"
      name: "${NAME}"
    spec:
      host: "${HOST_ROUTE}"
      port:
        targetPort: 8080-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: "${NAME}"
        weight: 100
      wildcardPolicy: None
  - apiVersion: autoscaling/v2beta1
    kind: HorizontalPodAutoscaler
    metadata:
      name: "${NAME}-cpu-autoscaler"
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: "${NAME}"
        subresource: scale
      minReplicas: 3
      maxReplicas: 5
      metrics:
        - type: Resource
          resource:
            name: cpu
            targetAverageUtilization: 90
parameters:
  - name: NAME
    description: The name assigned to ojects defined by this template
    required: true
    value: "maintenance-page"
  - name: HOST_ROUTE
    description: The host the route will use to expose service outside cluster
    required: true