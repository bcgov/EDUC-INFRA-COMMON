pipeline {
  agent any

  environment {
    DEBUG_OUTPUT = 'false'

    TOOLS = 'c2mvws-tools'
    DEV = 'c2mvws-dev'
    TEST = 'c2mvws-test'
    PROD = 'c2mvws-prod'

    REPO_NAME = 'educ-infra-common'
    OWNER = 'bcgov'
    NAME = 'maintenance-page'

    APP_NAME = 'maintenance-page'
    APP_DOMAIN = 'pathfinder.gov.bc.ca'

    SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
    SOURCE_REPO_REF = 'master'
    SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'
    CONTEXT_DIR = 'maintenance-page/html'

    TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
    DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
    TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
    PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
  }

  stages {
    stage('Initialize') {
      steps {
        script {
          if (DEBUG_OUTPUT.equalsIgnoreCase('true')) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }
    stage('Build') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(TOOLS) {
              Backend: {
                try {
                  echo "Building maintenance page..."
                  def bcBackend = openshift.process('-f', 'maintenance-page/openshift/bc.yaml', "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")
                  openshift.apply(bcBackend).narrow('bc').startBuild('-w').logs('-f')
                } catch (e) {
                  echo "Maintenance page build failed"
                  throw e
                }
              }
            }
          }
        }
      }
      post {
        success {
          echo 'Cleanup BuildConfigs...'
          script {
            openshift.withCluster() {
              openshift.withProject(TOOLS) {
                if (DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                  echo "DEBUG - Using project: ${openshift.project()}"
                } else {
                  def bcBackend = openshift.selector('bc', "${NAME}")

                  if (bcBackend.exists()) {
                    echo "Removing BuildConfig maintenance page..."
                    bcBackend.delete()
                  }
                }
              }
            }
          }
        }
        failure {
          echo 'Build stage failed'
        }
      }
    }
    stage('Deploy to DEV') {
      steps {
        deployStage(DEV)
      }
      post {
        success {
          echo 'Deployment to DEV was successful'
        }
        failure {
          echo 'Deployment to DEV failed'
        }
      }
    }
    stage('Update route') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(DEV) {
              echo 'Pointing GetMyPen route to maintenance page'
              openshift.patch("route/student-profile-frontend-master", '\'{"spec":{"to":{"name":"maintenance-page"}}}\'')
              openshift.patch("route/student-profile-frontend-master", '\'{"spec":{"port":{"targetPort":"8080-tcp"}}}\'')
              def p = openshift.selector( 'route/student-profile-frontend-master' ).object()
              p.metadata.labels['app']='student-profile-frontend-master-2'
              openshift.apply(p)
            }
          }
        }
      }
      post {
        success {
          echo 'Route successfully changed'
        }
        failure {
          echo 'Failed to change route'
        }
      }
    }
    /*stage('e2e tests') {
      agent {
        node {
          label 'nodejs10'
        }
      }
      steps {
        script {
          timeout(10) {
            dir('frontend') {
              echo 'Running e2e tests'
              sh 'npm install'
              sh 'npm run test:e2e'
            }
          }
        }
      }
    }*/
  }
}

def deployStage(String projectEnv) {
  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      if (DEBUG_OUTPUT.equalsIgnoreCase('true')) {
        echo "DEBUG - Using project: ${openshift.project()}"
      }
      echo "Tagging Image ${NAME}..."
      openshift.tag("${TOOLS}/${NAME}:latest", "${NAME}:latest")

      echo "Processing DeploymentConfig ${NAME}..."
      def dcBackendTemplate = openshift.process('-f',
              'maintenance-page/openshift/dc.yaml',
              "NAME=${NAME}"
      )

      def dcBackend = openshift.apply(dcBackendTemplate).narrow('dc')

      // Wait for deployments to roll out
      timeout(10) {
        Backend: {
          dcBackend.rollout().status('--watch=true')
        }
      }
    }
  }
}
